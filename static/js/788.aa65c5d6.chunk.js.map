{"version":3,"file":"static/js/788.aa65c5d6.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","redux/filter/filterSelectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Notify } from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport { Button, Flex, FormLabel, Text, Box, Input } from '@chakra-ui/react';\n\nimport { Form, Field, ErrorMessage } from 'formik';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().positive().integer().required(),\n});\n\nexport const ContactForm = () => {\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, actions) => {\n    const newName = {\n      createdAt: new Date(),\n      name: values.name,\n      number: values.number,\n    };\n    const newContactNameNormalized = values.name.toLowerCase();\n    const findContact = contacts.find(\n      contact => contact.name.toLowerCase() === newContactNameNormalized\n    );\n    const handleAddContact = newName => {\n      Notify.success(`${values.name} has been added to your contacts`);\n      dispatch(addContact(newName));\n    };\n    findContact\n      ? Notify.warning(`${values.name} is already in contacts`)\n      : handleAddContact(newName);\n    actions.resetForm();\n  };\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\">\n      <Box minW=\"400px\" minH='380px' boxShadow=\"dark-lg\" p=\"5\" borderRadius='lg'>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={schema}\n        >\n          <Form>\n            <FormLabel m='0'>\n              <Text display=\"block\" py=\"2\" fontSize=\"3xl\">\n                Name\n              </Text>\n              <Input\n                as={Field}\n                variant=\"filled\"\n                size=\"lg\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Enter contact name\"\n              ></Input>\n              <ErrorMessage name=\"name\" component=\"span\"></ErrorMessage>\n            </FormLabel>\n            <FormLabel m='0'>\n              <Text display=\"block\" py=\"2\" fontSize=\"3xl\">\n                Number\n              </Text>\n              <Input\n                as={Field}\n                variant=\"filled\"\n                size=\"lg\"\n                type=\"tel\"\n                name=\"number\"\n                placeholder=\"Enter phone number\"\n              ></Input>\n              <ErrorMessage name=\"number\" component=\"span\"></ErrorMessage>\n            </FormLabel>\n            <Flex justifyContent=\"center\" mt='12'>\n              <Button variant=\"outline\" colorScheme='black' type=\"submit\" fontWeight='normal' bg='teal.400' fontSize=\"2xl\" _hover={{ color: 'white' }} transition='color 250ms cubic-bezier(0.4, 0, 0.2, 1)'>\n                Add contact\n              </Button>\n            </Flex>\n          </Form>\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { Notify } from 'notiflix';\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { ListItem, Text, Button, Flex } from '@chakra-ui/react';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = id => {\n    Notify.success(`${name} has been removed from your contacts`);\n    dispatch(deleteContact(id));\n  };\n  return (\n    <ListItem key={id} minW='500px'>\n      <Flex justifyContent='space-between' alignItems='center'>\n                <Text >\n          Name: \n          <Text color=\"white\" display=\"inline-block\" ml=\"2\" mr='4'>\n            {name}\n          </Text>\n          Number: \n          <Text color=\"white\" display=\"inline-block\" ml=\"2\">\n            {number}\n          </Text>\n        </Text>\n        <Button variant=\"outline\" colorScheme='black' size='xs' _hover={{ color: 'white' }} bg='teal.400' fontWeight='normal' transition='color 250ms cubic-bezier(0.4, 0, 0.2, 1)' ml='auto' type=\"button\" onClick={() => handleDeleteContact(id)}>\n          Delete\n        </Button>\n      </Flex>\n    </ListItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n};\n","export const selectFilter = state => state.filter;","import { useSelector } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { List, Box, Flex } from '@chakra-ui/react';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { selectFilter } from '../../redux/filter/filterSelectors';\n\nexport const ContactList = () => {\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <Flex justifyContent=\"center\">\n      <Box minW=\"600px\">\n        <Flex justifyContent=\"center\">\n          <List p=\"12\">\n            {getVisibleContacts().map(contact => (\n              <ContactListItem\n                key={contact.id}\n                name={contact.name}\n                number={contact.number}\n                id={contact.id}\n              />\n            ))}\n          </List>\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nContactList.propTypes = {\n  visibleContacts: PropTypes.arrayOf(PropTypes.shape),\n  onDeleteContact: PropTypes.func,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { changeFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from '../../redux/filter/filterSelectors';\nimport { FormLabel, Text, Input, Flex, Box } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    \n      <Flex justifyContent='center'>\n        <Box minW='550px' m='0'>\n      <FormLabel m='0'>\n        <Text py='12'  fontSize=\"3xl\" textAlign=\"center\" fontWeight='bold'>\n          Find contacts by name\n        </Text>\n        <Input\n          variant=\"filled\"\n          size=\"lg\"\n          placeholder=\"Find your contact\"\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n        ></Input>\n      </FormLabel>\n      </Box>\n    </Flex>\n   \n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onFilter: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from '../redux/contacts/contactsSelectors';\nimport { fetchContacts } from '../redux/contacts/contactsOperations';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Heading } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Heading as='h2' size='xl' textAlign='center' mb='7'>Contacts</Heading>\n      <ContactForm></ContactForm>\n      <div>{isLoading && 'Request in progress'}</div>\n      <Filter></Filter>\n      <ContactList></ContactList>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","schema","yup","shape","name","required","number","positive","integer","ContactForm","dispatch","useDispatch","useSelector","alignItems","justifyContent","minW","minH","boxShadow","p","borderRadius","initialValues","onSubmit","values","actions","newName","createdAt","Date","newContactNameNormalized","toLowerCase","find","contact","Notify","addContact","handleAddContact","resetForm","validationSchema","m","display","py","fontSize","as","Field","variant","size","type","placeholder","component","mt","colorScheme","fontWeight","bg","_hover","color","transition","ContactListItem","id","ml","mr","onClick","deleteContact","handleDeleteContact","selectFilter","filter","ContactList","normalizedFilter","includes","getVisibleContacts","map","Filter","textAlign","value","onChange","e","changeFilter","currentTarget","Contacts","useEffect","fetchContacts","mb"],"sourceRoot":""}