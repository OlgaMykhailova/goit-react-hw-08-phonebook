{"version":3,"file":"static/js/710.0366e08f.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactFormStyled.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","redux/filter/filterSelectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  margin: 20px 0;\n  border: 2px dotted black;\n  border-radius: 5px;\n  padding: 10px;\n  color: rgb(15, 103, 165);\n  background-color: rgb(183, 220, 230);\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\n\nexport const Text = styled.span`\nmargin-bottom: 5px;\n`\n\nexport const Field = styled(FormikField)`\n  background-color: white;\n  border: 1px solid black;\n  filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.15));\n  border-radius: 4px;\n  padding: 10px;\n  color: rgb(15, 103, 165);\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\ncolor: red;\n`\n\nexport const Button = styled.button`\n  cursor: pointer;\n  background-color: #5EC4CD;\n  line-height: 1.62;\n  border: transparent;\n  padding: 6px 22px;\n  width: 120px;\n  border-radius: 5px;\n  color: black;\n  border: 1px solid black;\n  &:hover,\n  &:focus {\n    color: black;\n    background-color: #5EC4CD;\n    box-shadow: 0px 3px 1px rgb(0 0 0 / 10%), 0px 1px 2px rgb(0 0 0 / 8%),\n      0px 2px 2px rgb(0 0 0 / 12%);\n  }\n`;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Notify } from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { addContact } from '../../redux/contacts/contactsOperations';\n\nimport {\n  Form,\n  Label,\n  Text,\n  Field,\n  Button,\n  ErrorMessage,\n} from './ContactFormStyled';\n\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().positive().integer().required(),\n});\n\nexport const ContactForm = () => {\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, actions) => {\n    const newName = {\n      createdAt: new Date(),\n      name: values.name,\n      number: values.number,\n    }\n    const newContactNameNormalized = values.name.toLowerCase();\n    const findContact = contacts.find(\n      contact => contact.name.toLowerCase() === newContactNameNormalized\n    );\n    const handleAddContact = (newName) => {\n      Notify.success(`${values.name} has been added to your contacts`);\n      dispatch(addContact(newName))\n    }\n    findContact\n      ? Notify.warning(`${values.name} is already in contacts`)\n      : handleAddContact(newName);\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form>\n        <Label>\n          <Text>Name</Text>\n          <Field type=\"text\" name=\"name\"></Field>\n          <ErrorMessage name=\"name\" component=\"span\"></ErrorMessage>\n        </Label>\n        <Label>\n          <Text>Number</Text>\n          <Field type=\"tel\" name=\"number\"></Field>\n          <ErrorMessage name=\"number\" component=\"span\"></ErrorMessage>\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\ndisplay: flex;\njustify-content: space-between;\n&:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`\nexport const Text = styled.span`\ncolor: rgb(15, 103, 165);\n`\n\nexport const Button = styled.button`font-family: var(--font);\n  cursor: pointer;\n  background-color: #5EC4CD;\n  line-height: 1.62;\n  border: transparent;\n  border-radius: 5px;\n  color: black;\n  border: 1px solid black;\n\n&:hover,\n&:focus {\n  color: black;\n  background-color: #5EC4CD;\n  box-shadow: 0px 3px 1px rgb(0 0 0 / 10%), 0px 1px 2px rgb(0 0 0 / 8%),\n    0px 2px 2px rgb(0 0 0 / 12%);\n    `","import { useDispatch } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { Notify } from 'notiflix';\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { Button, ListItem, Text } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = (id) => {\n    Notify.success(`${name} has been removed from your contacts`);\n    dispatch(deleteContact(id))\n  }\n  return (\n    <ListItem key={id}>\n      <Text>\n        {name}: {number}\n      </Text>\n      <Button type=\"button\" onClick={() => handleDeleteContact(id)}>\n        Delete\n      </Button>\n    </ListItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  color: black;\n  border: 2px solid black);\n  border-radius: 5px;\n  padding: 10px;\n `;\n","export const selectFilter = state => state.filter;","import { useSelector } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { selectFilter } from '../../redux/filter/filterSelectors';\n\nexport const ContactList = () => {\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  \n   \n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <List>\n      {getVisibleContacts().map(contact => (\n        <ContactListItem\n          key={contact.id}\n          name={contact.name}\n          number={contact.number}\n          id={contact.id}\n        />\n      ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  visibleContacts: PropTypes.arrayOf(PropTypes.shape),\n  onDeleteContact: PropTypes.func,\n};\n","import styled from 'styled-components';\n\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\n\nexport const Text = styled.span`\ncolor: rgb(15, 103, 165);\nmargin-bottom: 10px;\n`\n\nexport const Input = styled.input`\n  background-color: white;\n  border: 1px solid black;\n  filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.15));\n  border-radius: 4px;\n  padding: 10px;\n  color: rgb(15, 103, 165);\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { changeFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from '../../redux/filter/filterSelectors';\nimport { Label, Text, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      <Text>Find contacts by name</Text>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={(e) => dispatch(changeFilter(e.currentTarget.value))}\n      ></Input>\n    </Label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onFilter: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from '../redux/contacts/contactsSelectors';\nimport { fetchContacts } from '../redux/contacts/contactsOperations';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h2>Your Contacts</h2>\n      <ContactForm></ContactForm>\n      <div>{isLoading && 'Request in progress'}</div>\n      <Filter></Filter>\n      <ContactList></ContactList>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","Form","styled","FormikForm","Label","Text","Field","FormikField","ErrorMessage","FormikErrorMessage","Button","schema","yup","shape","name","required","number","positive","integer","ContactForm","dispatch","useDispatch","useSelector","initialValues","onSubmit","values","actions","newName","createdAt","Date","newContactNameNormalized","toLowerCase","find","contact","Notify","addContact","handleAddContact","resetForm","validationSchema","type","component","ListItem","ContactListItem","id","onClick","deleteContact","handleDeleteContact","List","selectFilter","filter","ContactList","normalizedFilter","includes","getVisibleContacts","map","Input","Filter","value","onChange","e","changeFilter","currentTarget","Contacts","useEffect","fetchContacts"],"sourceRoot":""}